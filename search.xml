<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/19/siesta%E5%AE%89%E8%A3%85/"/>
      <url>/2019/09/19/siesta%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="Siesta安装"><a href="#Siesta安装" class="headerlink" title="Siesta安装"></a>Siesta安装</h3><p>按道理说，对于一个计算程序的安装看说明书即可。不过简单写一下，可以节省很多时间。新版的安装很容易，lapack，blas以及scalapack都是自带的，编译一下即可，所以省却很多设置的麻烦。</p><p>1、首先下载：</p><p>wget <a href="https://launchpad.net/siesta/4.1/4.1-b3/+download/siesta-4.1-b3.tar.gz" target="_blank" rel="noopener">https://launchpad.net/siesta/4.1/4.1-b3/+download/siesta-4.1-b3.tar.gz</a></p><p>2、然后解压缩，</p><p>tar zxvf siesta-4.1-b3.tar.gz</p><p>进入Obj目录。新版本不在Src目录下编译，而是在Obj目录下编译，这样可以保持Src目录的原始状态和干净。运行：</p><p>sh ../Src/obj_setup.sh</p><p>这会把相关的文件和文件夹拷贝到Obj目录下，这里是专门编译的地方。</p><p>3、串行编译：</p><p>在Obj目录下，有gfortran.make文件。</p><p>cp gfortran.make arch.make</p><p>修改其中的一行：</p><p>LIBS = /opt/math_library/lib/liblapack.so /opt/math_library/lib/libblas.so</p><p>make</p><p>当前目录下会产生siesta可执行文件。</p><p>4、并行编译：</p><p>在arch.make文件中修改CC=…和FC=…这两行为你系统中mpicc和mpif90的绝对路径：</p><p>CC = /opt/mvapich2-2.2rc1/bin/mpicc</p><p>FC = /opt/mvapich2-2.2rc1/bin/mpif90</p><p>并紧随其后添加如下两行：</p><p>MPI_INCLUDE=.<br>MPI_INTERFACE=libmpi_f90.a</p><p>修改 LIBS=…行为：</p><p>LIBS = /opt/math_library/lib/libscalapack.so /opt/math_library/lib/liblapack.so /opt/math_library/lib/libblas.so</p><p>在FPPF LAGS = …的后面添加一行：</p><p>FPPFLAGS += -DMPI</p><p>然后make就可以了。</p><p>由于调用的是scalapack和lapack以及blas的动态库，运行siesta程序之前一定确保运行过</p><p>export LD_LIBRARY_PATH=/opt/math_library/lib:$LD_LIBRARY_PATH</p><p>以便能在运行时找得到这些动态库。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/19/hello-world/"/>
      <url>/2019/09/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小诗一首</title>
      <link href="/2019/09/19/%E5%B0%8F%E8%AF%97%E4%B8%80%E9%A6%96/"/>
      <url>/2019/09/19/%E5%B0%8F%E8%AF%97%E4%B8%80%E9%A6%96/</url>
      
        <content type="html"><![CDATA[<p>##塞下曲</p><p>卢纶</p><p>林暗草惊风，将军夜引弓。</p><p>平明寻白羽，没在石棱中。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编程学习总结</title>
      <link href="/2019/09/14/%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
      <url>/2019/09/14/%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>###编程的结构：</p><pre><code>数据类型数据的输入和输出顺序，选择，循环函数 数组文件的操作  </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
